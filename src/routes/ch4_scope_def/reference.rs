pub fn reference() {
    let s1 = String::from("hello");
    //& : 참조자를 나타냄
    let len = calculate_length(&s1);

    println!("The length of '{s1}' is {len}");
    /*
    참조자를 만드는 행위를 '대어(borrow)' 라고 한다. / 변수가 기본적으로 불변성을 지니듯 참조자도 마찬가지로 참조하는 것을 수정할 수 없다. 
        -> 가변 참조자는 똑같이 'mut'를 사용 
        -> 가변 참조자의 큰 제약사항 : 어떤 값에 대한 가변 참조자가 있다면, 그 값에 대한 참조자는 더 이상 만들 수 없다. 또한 어떤 값에 대한 불변 참조자가 있는 동안 같은 값의 가변 참조자를 만드는 것도 불가능
            여러 개의 불변 참조자를 만드는 것은 가능
    같은 데이터에 대하여 동시에 여러 가변 참조자의 사용을 막는 이러한 제약은 값의 변경에 대한 제어가 원활하도록 해준다. 대부분의 언어들이 언제든 값 변경을 허용하기 때문에, 갓 입문한 사람들은 장애물처럼 다가올 수 있다.
    하지만 러스트는 이 제약 덕분에 컴파일 타임에 데이터 경합(data race)을 방지할 수 있다.
    */
}

pub fn calculate_length(s: &String) -> usize { // s는 String의 참조자이다.
    s.len()
}// 여기서 s가 스코프 밖으로 벗어난다. 하지만 참조하는 것을 소유하고 있진 않으므로, 버려지지 않는다.